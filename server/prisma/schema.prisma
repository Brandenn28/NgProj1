generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  post  Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean? @default(false)
  authorId  Int?
  author    User?    @relation(fields: [authorId], references: [id])
}


model Workstation {
  id Int @default(autoincrement()) @id
  name String @unique
  workstationId String @unique
  capacity Int
  block String
  level String
  roomCode String
  availability WorkstationAvailability
  features Workstation_WorkstationFeatures[]
  type WorkstationType @relation(fields: [typeID], references: [id])
  typeID Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

enum WorkstationAvailability{
  Available
  Unavailable
  Maintenance
}

model WorkstationType{
  id Int @default(autoincrement()) @id
  name String @unique
  workstations Workstation[]
}

model WorkstationFeatures{
  id Int @default(autoincrement()) @id
  name String
  workstations Workstation_WorkstationFeatures[]

}

model Workstation_WorkstationFeatures{
  // id Int @default(autoincrement()) @id
  workstationId Int
  featureID Int

  workstation Workstation @relation(fields: [workstationId], references: [id], onDelete: Cascade)
  feature WorkstationFeatures @relation(fields: [featureID], references: [id], onDelete: Cascade)

  @@id([workstationId, featureID])

}
