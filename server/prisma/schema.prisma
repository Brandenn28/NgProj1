generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   post  Post[]
// }

// model Post {
//   id        Int      @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean? @default(false)
//   authorId  Int?
//   author    User?    @relation(fields: [authorId], references: [id])
// }


model Workstation {
  id Int @default(autoincrement()) @id
  name String @unique
  workstationId String @unique
  capacity Int
  block String
  level String
  roomCode String
  availability WorkstationAvailability
  features Workstation_WorkstationFeatures[]
  type WorkstationType @relation(fields: [typeID], references: [id])
  typeID Int
  //second iteration
  images Workstation_Image[]
  access Workstation_AccessRole[]
  policyID String 
  bookingPolicies Workstation_BookingPolicy[]
  blackoutPeriods BlackoutPeriod[]
  //second iteration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

enum WorkstationAvailability{
  Available
  Unavailable
  Maintenance
}

model WorkstationType{
  id Int @default(autoincrement()) @id
  name String @unique
  workstations Workstation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkstationFeatures{
  id Int @default(autoincrement()) @id
  name String
  workstations Workstation_WorkstationFeatures[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workstation_WorkstationFeatures{
  // id Int @default(autoincrement()) @id
  workstationId String
  featureID Int
  workstation Workstation @relation(fields: [workstationId], references: [workstationId], onDelete: Cascade)
  feature WorkstationFeatures @relation(fields: [featureID], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([workstationId, featureID])

}

//new schema second iteration
model Workstation_Image{
  id Int @default(autoincrement())@id
  workstationId String 
  workstation Workstation @relation(fields: [workstationId], references: [workstationId], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//new schema second iteration
model AccessRole{
  id Int @default(autoincrement()) @id
  rolesId String @unique
  name String @unique
  workstations Workstation_AccessRole[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//new schema second iteration
model Workstation_AccessRole{
  // id Int @default(autoincrement()) @id
  workstationId String 
  accessRoleId String 
  workstation Workstation @relation(fields: [workstationId], references: [workstationId], onDelete: Cascade)
  accessRole AccessRole @relation(fields: [accessRoleId], references: [rolesId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([workstationId, accessRoleId])
}

//new schema second iteration 
model BookingPolicy{
  id Int @default(autoincrement()) @id
  policyId String @unique
  name String @unique
  minDuration Int
  maxDuration Int
  advanceNotice Int
  maxHoursPerDay Int
  maxHoursPerWeek Int
  bufferTime Int
  needCheckIn Boolean
  checkInWindowBefore Int
  checkInWindowAfter Int
  workstation Workstation_BookingPolicy[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//new schemna second iteration
model Workstation_BookingPolicy{
  workstationID String
  policyId String
  workstation Workstation @relation(fields: [workstationID], references: [workstationId], onDelete: Cascade)
  policy BookingPolicy @relation(fields: [policyId], references: [policyId], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([workstationID, policyId])
}

//new schema second iteration
model BlackoutPeriod{
  id Int @default(autoincrement()) @id
  workstationId String
  workstation Workstation @relation(fields: [workstationId], references: [workstationId], onDelete: Cascade)
  startDate DateTime
  endDate DateTime
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

